// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package adocv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdocServiceClient is the client API for AdocService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdocServiceClient interface {
	Index(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Adocs, error)
}

type adocServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdocServiceClient(cc grpc.ClientConnInterface) AdocServiceClient {
	return &adocServiceClient{cc}
}

func (c *adocServiceClient) Index(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Adocs, error) {
	out := new(Adocs)
	err := c.cc.Invoke(ctx, "/adoc.v1.AdocService/Index", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdocServiceServer is the server API for AdocService service.
// All implementations must embed UnimplementedAdocServiceServer
// for forward compatibility
type AdocServiceServer interface {
	Index(context.Context, *emptypb.Empty) (*Adocs, error)
	mustEmbedUnimplementedAdocServiceServer()
}

// UnimplementedAdocServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdocServiceServer struct {
}

func (UnimplementedAdocServiceServer) Index(context.Context, *emptypb.Empty) (*Adocs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedAdocServiceServer) mustEmbedUnimplementedAdocServiceServer() {}

// UnsafeAdocServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdocServiceServer will
// result in compilation errors.
type UnsafeAdocServiceServer interface {
	mustEmbedUnimplementedAdocServiceServer()
}

func RegisterAdocServiceServer(s grpc.ServiceRegistrar, srv AdocServiceServer) {
	s.RegisterService(&AdocService_ServiceDesc, srv)
}

func _AdocService_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdocServiceServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adoc.v1.AdocService/Index",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdocServiceServer).Index(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AdocService_ServiceDesc is the grpc.ServiceDesc for AdocService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdocService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adoc.v1.AdocService",
	HandlerType: (*AdocServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _AdocService_Index_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adoc/v1/adoc.proto",
}
